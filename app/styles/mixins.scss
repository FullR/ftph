// Breakpoint mixin
@mixin bp($size, $dim: width) {
    @if $size == tiny {
        @media screen and (max-#{$dim}: 480px) { @content; }
    }
    @else if $size == small {
        @media screen and (max-#{$dim}: 600px) { @content; }
    }
    @else if $size == medium {
        @media screen and (max-#{$dim}: 1281px) { @content; }
    }
    @else if $size == large {
        @media screen and (max-#{$dim}: 1600px) { @content; }
    }
}

@mixin fill {
    width: 100%;
    height: 100%;
}

// Hover/active wrapper. If the hover-enabled class isn't present, 
// no hover effects will be used
@mixin active() {
    .hover-enabled &:hover, &:active {
        @content;
    }
}

/*
    Set all position properties:
    y offset,
    x offset,
    top/bottom,
    left/right,
    position
*/
@mixin pos($y: auto, $x: auto, $topBottom: top, $leftRight: left, $posType: absolute) {
    position: $posType;
    @if $topBottom == top {
        top: $y;
    }
    @else {
        bottom: $y;
    }

    @if $leftRight == left {
        left: $x;
    }
    @else {
        right: $x;
    }
}

// Utility mixin for setting width/height
@mixin size($width: auto, $height: auto) {
    width: $width;
    height: $height;
}

// Utility mixin for creating buttons
// with image backgrounds and hover image
// backgrounds
@mixin image-button($imgUrl, $hoverUrl) {
    background: url($imgUrl) no-repeat;
    background-size: 100% 100%;
    cursor: pointer;

    @include active {
        background-image: url($hoverUrl)
    }
}

@mixin border-image($src, $width, $offset, $repeat) {
  -webkit-border-image:$src $width $offset $repeat; /* Safari */
     -moz-border-image:$src $width $offset $repeat; /* Old firefox */
       -o-border-image:$src $width $offset $repeat; /* Opera */
          border-image:$src $width $offset $repeat;
}

// Marks the last element as last for susy grids
@mixin mark-last {
    &:last-child { @include last; }
}

// after pseudo-selector with default blank content
@mixin after($content: "") {
    &::after {
        content: $content;
        @content;
    }
}

// before pseudo-selector with default blank content
@mixin before($content: "") {
    &::before {
        content: $content;
        @content;
    }
}